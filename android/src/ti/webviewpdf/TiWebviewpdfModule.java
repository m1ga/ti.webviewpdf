/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.webviewpdf;

import android.content.Context;
import android.print.PdfPrint;
import android.print.PrintAttributes;
import android.print.PrintDocumentAdapter;
import android.print.PrintManager;
import android.util.DisplayMetrics;
import android.webkit.WebView;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

import ti.modules.titanium.ui.WebViewProxy;
import ti.modules.titanium.ui.widget.webview.TiUIWebView;


@Kroll.module(name = "TiWebviewpdf", id = "ti.webviewpdf")
public class TiWebviewpdfModule extends KrollModule {

    @Kroll.constant
    public static final int DIN_A4 = 0;
    @Kroll.constant
    public static final int DIN_A5 = 1;
    @Kroll.constant
    public static final int DIN_A3 = 2;
    @Kroll.constant
    public static final int DIN_A2 = 3;
    @Kroll.constant
    public static final int DIN_A1 = 4;
    @Kroll.constant
    public static final int AUTO = 5;
    // Standard Debugging variables
    private static final String LCAT = "TiWebviewpdfModule";
    private static final boolean DBG = TiConfig.LOGD;
    PrintManager printManager;

    public TiWebviewpdfModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    @Kroll.method
    public void createPDF(KrollDict krollObject) {

        WebViewProxy webViewProxy = (WebViewProxy) krollObject.get("webview");
        TiUIWebView currWebView = webViewProxy.getWebView();

        if (currWebView != null) {
            if (printManager == null) {
                TiBaseActivity baseActivity = (TiBaseActivity) TiApplication.getAppRootOrCurrentActivity();
                printManager = (PrintManager) baseActivity.getInitialBaseContext()
                        .getSystemService(Context.PRINT_SERVICE);
            }
            WebView webView = currWebView.getWebView();
            String jobName = "Document";
            Boolean firstPageOnly = false;

            PrintAttributes.MediaSize mediaSize;
            if (krollObject.containsKeyAndNotNull("pageSize")) {
                if (krollObject.getInt("pageSize") == DIN_A5) {
                    mediaSize = PrintAttributes.MediaSize.ISO_A5;
                } else if (krollObject.getInt("pageSize") == DIN_A3) {
                    mediaSize = PrintAttributes.MediaSize.ISO_A3;
                } else if (krollObject.getInt("pageSize") == DIN_A2) {
                    mediaSize = PrintAttributes.MediaSize.ISO_A2;
                } else if (krollObject.getInt("pageSize") == DIN_A1) {
                    mediaSize = PrintAttributes.MediaSize.ISO_A1;
                } else if (krollObject.getInt("pageSize") == AUTO) {
                    DisplayMetrics metrics = TiApplication.getAppCurrentActivity().getResources().getDisplayMetrics();
                    int pdfHeight = (int) ((webView.getContentHeight()) / 90.0 * 1000)+ 1000;
                    int pdfWidth = (metrics.densityDpi / 90 * 1000) + 1000;
                    mediaSize = new PrintAttributes.MediaSize("custom", "custom", pdfWidth, pdfHeight);
                } else {
                    mediaSize = PrintAttributes.MediaSize.ISO_A4;
                }
            } else if (krollObject.containsKeyAndNotNull("pageWidth") && krollObject.containsKeyAndNotNull("pageHeight")) {
                mediaSize = new PrintAttributes.MediaSize("custom", "custom", krollObject.getInt("pageWidth"), krollObject.getInt("pageHeight"));
            } else {
                mediaSize = PrintAttributes.MediaSize.ISO_A4;
            }

            if (krollObject.containsKeyAndNotNull("firstPageOnly")) {
                firstPageOnly = krollObject.getBoolean("firstPageOnly");
            }

            PrintAttributes attributes = new PrintAttributes.Builder()
                    .setMediaSize(mediaSize)
                    .setColorMode(PrintAttributes.COLOR_MODE_COLOR)
                    .setResolution(new PrintAttributes.Resolution("pdf", "pdf", 600, 600))
                    .setMinMargins(PrintAttributes.Margins.NO_MARGINS)
                    .build();


            if (krollObject.containsKeyAndNotNull("showMenu") && krollObject.getBoolean("showMenu")) {
                // show a print menu
                PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter(jobName);
                String out = new SimpleDateFormat("yyyy-MM-dd_hh-mm-ss").format(new Date());
                printManager.print(out + ".pdf", printAdapter, attributes);
            } else {
                // create blog and return it without a menu
                try {
                    PdfPrint pdfPrint = new PdfPrint(attributes);
                    PrintDocumentAdapter adapter;
                    adapter = webView.createPrintDocumentAdapter(jobName);
                    pdfPrint.print(adapter, new PdfPrint.CallbackPrint() {
                        @Override
                        public void success(File file) {
                            KrollFunction successCallback = (KrollFunction) krollObject.get(TiC.PROPERTY_SUCCESS);
                            if (successCallback != null) {
                                KrollObject callbackThisObject = getKrollObject();
                                KrollDict kd = new KrollDict();
                                TiBaseFile bf = TiFileFactory.createTitaniumFile(file.getPath(), false);
                                kd.put("data", TiBlob.blobFromFile(bf));
                                successCallback.callAsync(callbackThisObject, kd);
                            }
                        }

                        @Override
                        public void onFailure(String error) {
                            Log.e(LCAT, "Error: " + error);
                        }
                    }, firstPageOnly);
                } catch (Exception e) {
                    Log.e(LCAT, "Error: " + e.getMessage());
                }
            }
        }
    }

}
